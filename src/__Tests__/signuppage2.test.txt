import React from "react";
import MockAdapter from "axios-mock-adapter";
import {
  act,
  getByTestId,
  render,
  fireEvent,
  screen,
  waitFor,
} from "@testing-library/react";
import SignUpPage2 from "../SignUpPage2";
import toast from "react-hot-toast";
import axios from "axios";
import { server } from "../mocks/server";
import { rest } from 'msw';

jest.mock("axios");

// describe("SignUpPage2", () => {
//     it("should make a POST request when the form is submitted with valid inputs", async () => {
//       axios.post.mockResolvedValueOnce({ data: { id: 1 } });
  
//       render(<SignUpPage2 />);
  
//       // Fill in the form inputs with valid values
//       fireEvent.change(screen.getByLabelText(/First name/i), {
//         target: { value: "John" },
//       });
//       fireEvent.change(screen.getByLabelText(/Last name/i), {
//         target: { value: "Doe" },
//       });
//       // Fill in other required form fields...
  
//       // Accept the policy
//       fireEvent.click(screen.getByLabelText(/Agree to policies/i));
  
//       // Submit the form
//       fireEvent.click(screen.getByText(/Sign Up/i));
  
//       // Wait for the API call to resolve
//       await screen.findByText(/Welcome to Odogwu/i);
  
//       // Assert that the mock function was called with the correct arguments
//       expect(axios.post).toHaveBeenCalledWith(
//         "http://localhost:3030/api/items",
//         expect.objectContaining({
//           firstName: "John",
//           lastName: "Doe",
//           // Other form field values...
//         })
//       );
  
//       // Assert any other necessary expectations
//     });
//   });
  

// beforeEach(() => {
//   mockPost = jest.spyOn(axios, 'post');
// });

// afterEach(() => {
//   mockPost.mockRestore();
// });

test("initial state", () => {
  render(<SignUpPage2 />);

  // Assert the initial state values
  expect(screen.getByLabelText("First name").value).toBe("");
  expect(screen.getByLabelText("Last name").value).toBe("");
  expect(screen.getByLabelText("Bvn").value).toBe("");
  expect(screen.getByLabelText("Date Of Birth").value).toBe("");
  expect(screen.getByLabelText("Email Address").value).toBe("");
  expect(screen.getByLabelText("Account Type").value).toBe("Savings");
  expect(screen.getByLabelText("Phone number").value).toBe("");
  expect(screen.getByLabelText("Password").value).toBe("");
  expect(screen.getByLabelText("Confirm Password").value).toBe("");
});

test("input field changes", () => {
  render(<SignUpPage2 />);

  // Simulate input field changes
  fireEvent.change(screen.getByLabelText("First name"), {
    target: { value: "John" },
  });
  fireEvent.change(screen.getByLabelText("Last name"), {
    target: { value: "Doe" },
  });

  // Assert the changed values
  expect(screen.getByLabelText("First name").value).toBe("John");
  expect(screen.getByLabelText("Last name").value).toBe("Doe");
});

test("handleChange updates state", () => {
  render(<SignUpPage2 />);

  fireEvent.change(screen.getByLabelText("First name"), {
    target: { value: "John" },
  });
  fireEvent.change(screen.getByLabelText("Last name"), {
    target: { value: "Doe" },
  });
  // Add more fireEvent.change calls for other inputs

  expect(screen.getByLabelText("First name")).toHaveValue("John");
  expect(screen.getByLabelText("Last name")).toHaveValue("Doe");
  // Add more expect statements for other inputs
});

// test('form submission with valid inputs', async () => {
//     render(<SignUpPage2 />);
  
//     const toastErrorMock = jest.fn();
//     const setItemMock = jest.spyOn(window.localStorage, 'setItem');
  
//     fireEvent.change(screen.getByLabelText('First name'), { target: { value: 'John' } });
//     fireEvent.change(screen.getByLabelText('Last name'), { target: { value: 'Doe' } });
//     // Add more fireEvent.change calls for other inputs
  
//     axios.post.mockResolvedValueOnce({});
  
//     await act(async () => {
//       fireEvent.click(screen.getByText('Sign Up'));
  
//       await waitFor(() => {
//         expect(axios.post).toHaveBeenCalledTimes(1);
//         expect(axios.post).toHaveBeenCalledWith('http://localhost:3030/api/items', {
//           firstName: 'John',
//           lastName: 'Doe',
//           // Add more key-value pairs for other inputs
//         });
//         expect(setItemMock).toHaveBeenCalledWith('customer', JSON.stringify({}));
//         expect(window.location.href).toBe('/userview2');
//       });
//     });
  
//     expect(toastErrorMock).not.toHaveBeenCalled();
//   });
  
  
